#include<stdio.h>
#include <stdbool.h>
struct Process
{
   int pid; 
   int bt;  
};

bool comparison1(struct Process a,struct Process b)
{
     return (a.bt < b.bt);
}
bool comparison2(struct Process a,struct Process b)
{
     return (a.bt > b.bt);
}

void findWaitingTime(struct Process proc[], int n, int wt[])
{
    wt[0] = 0;
    int i=0;
    for (i = 1; i < n ; i++ )
    wt[i] = proc[i-1].bt + wt[i-1] ;
}

void findTurnAroundTime(struct Process proc[], int n,int wt[], int tat[])
{
	int i;
    for (i = 0; i < n ; i++)
        tat[i] = proc[i].bt + wt[i];
}

void findavgTime(struct Process proc[], int n)
{
    int wt[n], i, tat[n], total_wt = 0, total_tat = 0;
    findWaitingTime(proc, n, wt);
    findTurnAroundTime(proc, n, wt, tat);
    printf("\nArrivalTime  \t Burst time  \t Waiting time \t Turn around time\n");
    for (i = 0; i < n; i++)
    {
        total_wt = total_wt + wt[i];
        total_tat = total_tat + tat[i];
        printf("\t%d\t\t%d\t\t%d\t\t%d\n",proc[i].pid,proc[i].bt,wt[i],tat[i]);
    }
    printf("Average waiting time = %f", (float)total_wt / (float)n);
    printf("\nAverage turn around time = %f", (float)total_tat / (float)n);
}
void sort(struct Process *p,int n,int c){
	int i=0,j=0;
	for(i=0;i<n;i++){
		for(j=i;j<n;j++){
			bool swap = false;
			if(c==1 && comparison1(p[i],p[j])){
				swap = true;
			}else if(c==2 && comparison2(p[i],p[j])){
				swap = true;
			}
			if(swap==true){
				struct Process t = p[i];
				p[i] = p[j];
				p[j] = t;
			}
		}
	}
}
int main()
{
    struct Process proc[] = {{6, 12}, {8, 16}, {1, 2}, {4, 8} , {3,6}};
    int n = sizeof proc / sizeof proc[0],i;
	    
	
    printf( "\n\t\t==========================================\n\t\t\tNon-Prempritive Schedule\t\t\t\t\t\n\t\t==========================================\n\n\n");
    sort(proc,n,2);
    printf("Order in which process gets executed\n");
    for (i = 0 ; i < n; i++)
    printf("PID:%d\t",proc[i].pid);
    findavgTime(proc, n);
    
	printf("\n\n\t\t\tSJF\t\t\t\t\t\n");
    sort(proc,n,1);
    printf("Order in which process gets executed\n");
    for (i = 0 ; i < n; i++)
    printf("PID:%d\t",proc[i].pid);
    findavgTime(proc, n);
    return 0;
}
